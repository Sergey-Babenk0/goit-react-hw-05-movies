{"version":3,"file":"static/js/565.01ffcc3f.chunk.js","mappings":"iPAEMA,EAAWC,EAAAA,EAAAA,GAAH,gHAQRC,EAAWD,EAAAA,EAAAA,GAAH,sS,SC6Bd,EAlCa,WACX,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAQR,OANAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAiBH,GAAII,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAC3BN,EAAWM,EAAKC,KACjB,GACF,GAAE,CAACN,KAGF,gCACGF,EAAQS,OAAS,IAAK,oEACvB,SAACb,EAAD,UACGI,EAAQU,KAAI,WAAoCC,GAApC,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,KAA5B,OACX,UAAChB,EAAD,YACE,gBACEiB,IACEF,EAAY,8CAC+BA,GACvC,+EAENG,IAAKF,EACLG,MAAM,QAEPH,EACAF,IAAa,uCAAeA,OAXhBD,EADJ,QAkBpB,C,+LCnCKO,EAAM,mCACNC,EAAW,+BAAjB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGACyBC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,uCACqBD,IAF9C,cACQI,EADR,yBAISA,GAJT,2EAOeC,EAAe,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA8BrB,GAA9B,uFACyBmB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA+BjB,EAA/B,oBAA6CgB,IADtE,cACQI,EADR,yBAESA,GAFT,2EAKeE,EAAmB,GAAnBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAkCC,GAAlC,uFACyBJ,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,YACsBO,IAF/C,cACQH,EADR,yBAISA,GAJT,2EAOejB,EAAiB,GAAjBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCH,GAAhC,uFACyBmB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAjB,EADA,4BACsBgB,IAF/C,cACQI,EADR,yBAISA,GAJT,2EAOeI,EAAiB,GAAjBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCxB,GAAhC,uFACyBmB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAjB,EADA,4BACsBgB,IAF/C,cACQI,EADR,yBAKSA,GALT,kE","sources":["pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx","services/The-movie-database-API.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nconst CastItem = styled.li`\n  width: 25%;\n  box-sizing: border-box;\n  text-align: center;\n  img {\n    display: block;\n    margin: 0 auto;\n    padding: 0 0 10px;\n    max-width: 100%;\n    height: auto;\n  }\n  p {\n    margin-top: 0.5rem;\n    font-size: 0.8rem;\n    font-weight: 600;\n  }\n`;\n\nexport { CastList, CastItem };\n","import { fetchCreditsById } from '../../services/The-movie-database-API';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { CastList, CastItem } from './Cast.styled';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    fetchCreditsById(id).then(({ data }) => {\n      setCredits(data.cast);\n    });\n  }, [id]);\n\n  return (\n    <>\n      {credits.length < 1 && <p>We don't have any casts for this movie.</p>}\n      <CastList>\n        {credits.map(({ character, profile_path, name }, index) => (\n          <CastItem key={index}>\n            <img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/original/${profile_path}`\n                  : 'https://www.lasff.com/uploads/2/6/7/4/26743637/poster-not-available_orig.jpg'\n              }\n              alt={name}\n              width=\"150\"\n            />\n            {name}\n            {character && <p>Character: {character}</p>}\n          </CastItem>\n        ))}\n      </CastList>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst KEY = 'fd28b85e264eab67a639ae3db03827da';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nasync function fetchTrendingMovies() {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n  );\n  return response;\n}\n\nasync function fetchMovieById(id) {\n  const response = await axios.get(`${BASE_URL}/movie/${id}?api_key=${KEY}`);\n  return response;\n}\n\nasync function fetchMovieBySearch(query) {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&${query}`\n  );\n  return response;\n}\n\nasync function fetchCreditsById(id) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${KEY}`\n  );\n  return response;\n}\n\nasync function fetchReviewsById(id) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}`\n  );\n\n  return response;\n}\n\nexport {\n  fetchTrendingMovies,\n  fetchMovieById,\n  fetchMovieBySearch,\n  fetchCreditsById,\n  fetchReviewsById,\n};\n"],"names":["CastList","styled","CastItem","useState","credits","setCredits","id","useParams","useEffect","fetchCreditsById","then","data","cast","length","map","index","character","profile_path","name","src","alt","width","KEY","BASE_URL","fetchTrendingMovies","axios","response","fetchMovieById","fetchMovieBySearch","query","fetchReviewsById"],"sourceRoot":""}